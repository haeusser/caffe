name: "SWWAE FER"

layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    mirror: true
    crop_size: 228
  }
  data_param {
    source: "data/custom/train/"
    batch_size: 30
    backend: LMDB
  }
}

layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    mirror: false
    crop_size: 228
  }
  data_param {
    source: "data/custom/test/"
    batch_size: 30
    backend: LMDB
  }
}

#layer {
#  name: "norm"
#  type: "MVN"
#  bottom: "data"
#  top: "norm"
#  mvn_param{
#    across_channels: true
#  }
#}

########################## Forward ##################################
layer {
  name: "conv1"
  type: "Convolution"
  #bottom: "norm"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 32   #################### TODO: HYPERPARAMETER TO BE TRAINED
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "relu1"
  type: "Sigmoid"
  bottom: "conv1"
  top: "conv1"
}

layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  top: "mask1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

########################## Backward ##################################
layer {
  name: "unpool1"
  type: "Unpooling"
  bottom: "pool1"
  bottom: "mask1"
  top: "unpool1"
  unpooling_param {
    kernel_size: 2
    stride: 2
	pad: 0
  }
}

layer {
  name: "deconv1"
  type: "Deconvolution"
  bottom: "unpool1"
  top: "deconv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 3
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "relu1_b"
  type: "Sigmoid"
  bottom: "deconv1"
  top: "deconv1"
}

########################## Loss ##################################

layer {
  name: "l2rec_conv1"
  type: "EuclideanLoss"
  #bottom: "norm"
  bottom: "data"
  bottom: "deconv1"
  top: "l2rec"
  loss_weight: 1
}

#layer {
#  name: "conv2"
#  type: "Convolution"
#  bottom: "pool1"
#  top: "conv2"
#  param {
#    lr_mult: 1
#  }
#  param {
#    lr_mult: 2
#  }
#  convolution_param {
#    num_output: 60
#    kernel_size: 5
#    stride: 2
#    weight_filler {
#      type: "xavier"
#    }
#    bias_filler {
#      type: "constant"
#    }
#  }
#}
#
#layer {
#  name: "relu2"
#  type: "Sigmoid"
#  bottom: "conv2"
#  top: "conv2"
#}
#
#layer {
#  name: "pool2"
#  type: "Pooling"
#  bottom: "conv2"
#  top: "pool2"
#  top: "mask2"
#  pooling_param {
#    pool: MAX
#    kernel_size: 2
#    stride: 2
#  }
#}
#
#layer {
#  name: "conv3"
#  type: "Convolution"
#  bottom: "pool2"
#  top: "conv3"
#  param {
#    lr_mult: 1
#  }
#  param {
#    lr_mult: 2
#  }
#  convolution_param {
#    num_output: 256
#    #pad: 1
#    kernel_size: 4
#    group: 2
#    weight_filler {
#      type: "xavier"
#    }
#    bias_filler {
#      type: "constant"
#    }
#  }
#}
#
#layer {
#  name: "relu3"
#  type: "Sigmoid"
#  bottom: "conv3"
#  top: "conv3"
#}
#
#layer {
#  name: "pool3"
#  type: "Pooling"
#  bottom: "conv3"
#  top: "pool3"
#  top: "mask3"
#  pooling_param {
#    pool: MAX
#    kernel_size: 2
#    stride: 2
#  }
#}
#
#layer {
#  name: "unpool1"
#  type: "Unpooling"
#  bottom: "pool3"
#  bottom: "mask3"
#  top: "unpool1"
#  unpooling_param {
#    kernel_size: 2
#    stride: 2
#  }
#}
#
## Deconvolutional layers + unpooling
## Undo the previous layers to reconstruct an image
#layer {
#  name: "deconv1"
#  type: "Deconvolution"
#  bottom: "unpool1"
#  top: "deconv1"
#  param {
#    lr_mult: 1
#  }
#  param {
#    lr_mult: 2
#  }
#  convolution_param {
#    num_output: 320
#    #pad: 1
#    kernel_size: 4
#    group: 2
#    weight_filler {
#      type: "xavier"
#    }
#    bias_filler {
#      type: "constant"
#    }
#  }
#}
#
#layer {
#  name: "relu4"
#  type: "Sigmoid"
#  bottom: "deconv1"
#  top: "deconv1"
#}
#
#layer {
#  name: "unpool2"
#  type: "Unpooling"
#  #bottom: "deconv1"
#  bottom: "pool2"
#  bottom: "mask2"
#  top: "unpool2"
#  unpooling_param {
#    kernel_size: 2
#    stride: 2
#  }
#}
#
#layer {
#  name: "deconv2"
#  type: "Deconvolution"
#  bottom: "unpool2"
#  top: "deconv2"
#  param {
#    lr_mult: 1
#  }
#  param {
#    lr_mult: 2
#  }
#  convolution_param {
#    num_output: 40
#    kernel_size: 5
#    stride: 2
#    weight_filler {
#      type: "xavier"
#    }
#    bias_filler {
#      type: "constant"
#    }
#  }
#}
#
#layer {
#  name: "relu5"
#  type: "Sigmoid"
#  bottom: "deconv2"
#  top: "deconv2"
#}
#
#layer {
#  name: "unpool3"
#  type: "Unpooling"
#  bottom: "deconv2"
#  bottom: "mask1"
#  top: "unpool3"
#  unpooling_param {
#    kernel_size: 2
#    stride: 2
#  }
#}
#
#layer {
#  name: "deconv3"
#  type: "Deconvolution"
#  bottom: "unpool3"
#  top: "deconv3"
#  param {
#    lr_mult: 1
#  }
#  param {
#    lr_mult: 2
#  }
#  convolution_param {
#    num_output: 3
#    kernel_size: 9
#    stride: 2
#    weight_filler {
#      type: "xavier"
#    }
#    bias_filler {
#      type: "constant"
#    }
#  }
#}
#
#layer {
#  name: "relu5"
#  type: "Sigmoid"
#  bottom: "deconv3"
#  top: "deconv3"
#}
#
## Discriminative loss
#layer {
#  name: "ip1"
#  type: "InnerProduct"
#  #bottom: "pool3"
#  bottom: "pool2"
#  top: "ip1"
#  param {
#    lr_mult: 1
#  }
#  param {
#    lr_mult: 2
#  }
#  inner_product_param {
#    num_output: 500
#    weight_filler {
#      type: "xavier"
#    }
#    bias_filler {
#      type: "constant"
#    }
#  }
#}
#layer {
#  name: "relu6"
#  type: "Sigmoid"
#  bottom: "ip1"
#  top: "ip1"
#}
#layer {
#  name: "ip2"
#  type: "InnerProduct"
#  bottom: "ip1"
#  top: "ip2"
#  param {
#    lr_mult: 1
#  }
#  param {
#    lr_mult: 2
#  }
#  inner_product_param {
#    num_output: 10
#    weight_filler {
#      type: "xavier"
#    }
#    bias_filler {
#      type: "constant"
#    }
#  }
#}
#
###### LOSS #####
#layer {
#  name: "accuracy"
#  type: "Accuracy"
#  bottom: "ip2"
#  bottom: "label"
#  top: "accuracy"
#  include {
#    phase: TEST
#  }
#}
#
#layer {
#  name: "nll"
#  type: "SoftmaxWithLoss"
#  bottom: "ip2"
#  bottom: "label"
#  top: "nll"
#  #loss_weight: 1 # lambdaNLL
#  loss_weight: 0
#}
#
## Reconstruction loss at input level
#layer {
#  name: "l2rec"
#  type: "EuclideanLoss"
#  bottom: "data"
#  bottom: "deconv3"
#  top: "l2rec"
#  loss_weight: 0.00000002 # lambdaL2rec
#}
#
## Intermediate L2 constraints (here, only one)
#layer {
#  name: "l2m1"
#  type: "EuclideanLoss"
#  bottom: "pool1"
#  bottom: "deconv2"
#  top: "l2m1"
#  #loss_weight: 0.000001 # lambdaL2M
#  loss_weight: 0
#}
#
#layer {
#  name: "l2m2"
#  type: "EuclideanLoss"
#  bottom: "pool2"
#  bottom: "deconv1"
#  top: "l2m2"
#  loss_weight: 0.04
#}
